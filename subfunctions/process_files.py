from functions.function_photo import function_photo 
from pprint import pprint
from subfunctions.time_decorator import time_decorator
from subfunctions.create_graph import create_graph
import os
clear = lambda: os.system('cls')

times = 0
data = {}


def process_files(file_queue):
    global times, data

    while True:
        file_info = file_queue.get()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if file_info is None:
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            create_graph(data, f'0/0/0')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ create_graph –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞—Ç—É '0/0/0'
            file_queue.task_done()
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        file_path = file_info  
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path}")
        times += 1
        print('*' * times)
        print(times)

        try:
            data[f'{file_path[1][-4]}/{file_path[1][-3]}/{file_path[1][-2]}'], _ = function_photo(file_path[0])
        except Exception as e:
            create_graph(data, f'0/0/0')
            print(f"üò¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n\t{file_path}\n\t–û—à–∏–±–∫–∞: {e}")


        file_queue.task_done()

