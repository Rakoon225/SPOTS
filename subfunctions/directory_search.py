import requests
import time
from bs4 import BeautifulSoup
from calendar import monthrange

def format_date_path(base_path, date_tuple):
    """ –°—Ç—Ä–æ–∏—Ç –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'base_path/YYYY/MM/DD/' """
    day, month, year = date_tuple
    return f"{base_path}/{year:04d}/{month:02d}/{day:02d}/"

def date_reached_or_passed(current_date, end_date):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –∏–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ """
    return (current_date[2] > end_date[2]) or \
           (current_date[2] == end_date[2] and current_date[1] > end_date[1]) or \
           (current_date[2] == end_date[2] and current_date[1] == end_date[1] and current_date[0] > end_date[0])

def next_date(current_date):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É """
    day, month, year = current_date
    days_in_current_month = monthrange(year, month)[1]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ

    if day < days_in_current_month:
        return (day + 1, month, year)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    elif month < 12:
        return (1, month + 1, year)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 1 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    else:
        return (1, 1, year + 1)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 1 —è–Ω–≤–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞

def directory_search(session, base_path, file_queue, start_date, end_date):
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –ø–æ –¥–∞—Ç–∞–º """

    current_date = start_date
    print(f"\nüü¢ –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å –¥–∞—Ç—ã: {current_date[0]:02d}-{current_date[1]:02d}-{current_date[2]}\n")

    while not date_reached_or_passed(current_date, end_date):
        current_path = format_date_path(base_path, current_date)
        print(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {current_path}")

        try:
            response = session.get(current_path)
            if response.status_code == 200:
                print(f"‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {current_path}:")
                soup = BeautifulSoup(response.text, "html.parser")


                for el in soup.find_all('a', href=True):
                    link = el['href']
                    if "HMIIC" in link or "4500" in link:
                        full_link = current_path + link
                        file_queue.put((full_link, current_path.split("/")))
                        print(f"üîó –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {full_link}")
                        break


            else:
                print(f"üö´ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {current_path} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º.")
            time.sleep(10)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
        current_date = next_date(current_date)

    print("\nüèÅ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫.")
    file_queue.put(None)  # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
